<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Filter symbols by toggling a list</title>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no">
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.11.0/mapbox-gl.js"></script>
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            }
        #map {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 100%;
            }
        .filter-group {
        font: 17px/20px 'Lucida Console',Courier New, monospace; 
        font-weight: 600;
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1;
        border-radius: 3px;
        width: 120px;
        color: #fff;
    }

    .filter-group input[type='checkbox']:first-child + label {
        border-radius: 3px 3px 0 0;
    }

    .filter-group label:last-child {
        border-radius: 0 0 3px 3px;
        border: none;
    }

    .filter-group input[type='checkbox'] {
        display: none;
    }

    .filter-group input[type='checkbox'] + label {
        background-color: #3386c0;
        display: block;
        cursor: pointer;
        padding: 10px;
        border-bottom: 1px solid rgba(0, 0, 0, 0.25);
    }
    /* code for when the box is unchecked, color is lighter */
    .filter-group input[type='checkbox'] + label {
        background-color: rgba(99, 150, 122, 0.2);
        text-transform: capitalize;
    }
    /* code for when the box is checked, color is darker */ 
    .filter-group input[type='checkbox'] + label:hover,
    .filter-group input[type='checkbox']:checked + label {
        background-color: rgba(99, 150, 122, 1.0);
    }

    .filter-group input[type='checkbox']:checked + label:before {
        content: 'âœ”';
        margin-right: 5px;
    }
      
      .checkboximage {
        width: 75%;
        height: 75%;
        object-fit: contain;
        align-content: left;
        margin-left: 4px; /* optional spacing */
      }

      .templeImage{
        width: 100%;
        height: 100%
      }

    </style>
  </head>

<body>
<div id="map"></div>
<!-- add filter group nav here   -->
<nav id="filter-group" class="filter-group"></nav>
<script>
	mapboxgl.accessToken = 'pk.eyJ1Ijoiam9tZXJzb24iLCJhIjoiY2o1bXE2bHlyMnJhZDMzbnpyMnhlODdpcSJ9.QJMJ_cTFCY050aZfSn1umQ';
    
    // Trench Data with attributes (trench number, name, and classes present)
     var places = {
          "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Ta Rem's Mound",
                "name": "Trench 8",
                "CerClass": [1, 4, 5], 
                "Primary Time Period": "Pre-Angkor Period", 
                "Number of Samples": "4" 
                  },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.303659,
                  13.115967
                ]
              },
              "id": 8
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Ta Rem's Mound",
                "name": "Trench 12",
                "CerClass": [4, 5],
                "Primary Time Period": "Late Angkor Period",
                "Number of Samples": "3"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.30366,
                  13.115886
                ]
              },
              "id": 12
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Klee Family Mound (Duck Trench)",
                "name": "Trench 16 & 17",
                "CerClass": [1, 4, 5],
                "Primary Time Period": "Early Angkor Period",
                "Number of Samples": "8"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.306667,
                  13.113058
                ]
              },
              "id": 17
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Banana Garden Mound",
                "name": "Trench 18 & 19", 
                "Class": [1, 2, 3, 4, 5, 6],
                "Primary Time Period": "Late Iron Age",
                "Number of Samples": "81"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.303237,
                  13.114319
                ]
              },
              "id": 18
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Kosal's Mound",
                "name": "Trench 20 & 21", 
                "CerClass": [1, 2, 4, 5],
                "Primary Time Period": "Early Angkor Period",
                "Number of Samples": "32"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.310147,
                  13.117944
                ]
              },
              "id": 20
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Cow Figurine Mound",
                "name": "Trench 22", 
                "CerClass": [1, 4, 6],
                "Primary Time Period": "Pre-Angkor Period",
                "Number of Samples": "4"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.306388,
                  13.114719
                ]
              },
              "id": 22
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Vireak's Mound (Cham Mound) ",
                "name": "Trench 23",
                "CerClass": [1, 3, 4, 5, 6],
                "Primary Time Period": "Pre-Angkor Period",
                "Number of Samples": "26"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.29878,
                  13.12134
                ]
              },
              "id": 23
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Keum's Mound (Daem Kvet Mound) ",
                "name": "Trench 24",
                "CerClass": [4, 5],
                "Primary Time Period": "Late Angkor Period",
                "Number of Samples": "10"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.301457,
                  13.12106
                ]
              },
              "id": 24
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Kosal's Mound ",
                "name": "Trench 27",
                "Class": [1, 4],
                "Primary Time Period": "Early Angkor Period",
                "Number of Samples": "4"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.310147,
                  13.117944
                ]
              },
              "id": 27
            },
            {
              "type": "Feature",
              "properties": {
                "Mound Name": "Rath's Mound 2",
                "name": "Trench 28", 
                "CerClass": [1, 5],
                "Primary Time Period": "Early Angkor Period", 
                "Number of Samples": "5"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.304036,
                  13.120227
                ]
              },
              "id": 28
            }
          ]
        }         
    // adding Prasat Baset as a point to the map, making it able to be styled differently from the trenches
     var temple = {
        "type": "FeatureCollection",
          "features": [
            {
              "type": "Feature",
              "properties": {
                "Name": "Prasat Baset",
                "Dating": "1018 CE by Suryavaman I"
              },
              "geometry": {
                "type": "Point",
                "coordinates": [
                  103.30387508897817,
                  13.116748967790759
                ]
              },
              "id": 1
            }
          ]
        }

     
     // Set bounds to area of reserach (Prasat Baset) 
		var bounds = [
		    [103.29208156830148, 13.112394384258002], // Southwest coordinates 
		    [103.32202027657821, 13.127081531100465] // Northeast coordinates   
		];

		var map = new mapboxgl.Map({
			container: 'map',
			style: 'mapbox://styles/mapbox/satellite-v9',
			center: [103.30833340594079, 13.11759733306607],   
			zoom: 10,
			minZoom: 1, // pick your own
			maxBounds: bounds // Sets bounds from variable above
		});
    // Map's On 'load' function.
    map.on('load', function () {
      var filterGroup = document.getElementById('filter-group');

      map.addSource('places', {
        type: 'geojson',
        data: places
      });
    
      map.addSource('temple', {
        type: 'geojson',
        data: temple
      });

      
    // Create one layer per class (so I can filter by class later)
      const classSet = new Set();
      places.features.forEach(f => {
        const cerClasses = f.properties.CerClass || f.properties.Class || [];
        cerClasses.forEach(c => classSet.add(c));
      });
      const uniqueClass = [...classSet].sort((a, b) => a - b);

      uniqueClass.forEach((CerClass, index) => {
          const layerID = `CerClass-${index}`; // avoids spaces in ID
       
    // Add a layer for this symbol type if there is not a layer with this name already.
        if (!map.getLayer(layerID)) {
        map.addLayer({
             'id': layerID,
             'type': 'symbol',
             'source': 'places',
             'layout': {
             'icon-image': 'circle-15',
             'icon-allow-overlap': true
             },
             // filter the dataset for all features that have the `icon` value that is the same and the current `symbol` value. 
            filter: ['in', CerClass, ['get', 'CerClass']] 

         });
    
        // adding layer for temple point from GEOJSON data
        const layerID2 = 'temple-symbol-layer-'
        
        if (!map.getLayer(layerID2)) {
        map.addLayer({
             'id': layerID2,
             'type': 'symbol',
             'source': 'temple',
             'layout': {
             'icon-image': 'circle-15',
             'icon-allow-overlap': true
             },
            'paint': {
                'icon-color': 'red'
                },

            });
            }   

        // making class names with buttons and images (images are in this folder)
          const classNames = {
            1: {
              text: "Class 1: Restricted",
              img: "Class1.png"
            },
            2: {
              text: "Class 2: Unrestricted",
              img: "Class2.png"
            },
            3: {
              text: "Class 3: Simple",
              img: "Class3.png"
            },
            4: {
              text: "Class 4: Restricted Everted Carinated",
              img: "Class4.png"
            },
            5: {
              text: "Class 5: Everted with Lip",
              img: "Class5.png"
            },
            6: {
              text: "Class 6: Concave",
              img: "Class6.png"
            }
          };
            
        // Add checkbox and label elements for the layer.
            var info = classNames[CerClass]

              var input = document.createElement('input');
              input.type = 'checkbox';
              input.id = layerID;
              input.checked = true;
              filterGroup.appendChild(input);

              var label = document.createElement('label');
              label.setAttribute('for', layerID);
              label.textContent = info?.text || 'Class ${CerClass}';
              filterGroup.appendChild(label);
             
    // making the images appear on the checkboxes 
              if (info.img) {
                const img = document.createElement('img');
                img.src = info.img;
                img.alt = `Image for ${info.text}`;
                img.className = 'checkboximage'; // class for changing the style of the images in CSS 
                filterGroup.appendChild(img);
                label.appendChild(img);
              }

       // When the checkbox changes, update the visibility of the layer.
        input.addEventListener('change', function (e) {
        map.setLayoutProperty(
        layerID,
        'visibility',
        e.target.checked ? 'visible' : 'none'              
        );
    });
             
        // Add popup code here (III.2)
        // When a click event occurs on a feature in the places layer, 
        // open a popup at the location of the feature, with description HTML from its 
        // properties.
        map.on('click', layerID, function (e) {
            var coordinates = e.features[0].geometry.coordinates.slice();
            var description = "<b>Name:</b> " 
                + e.features[0].properties.name 
                + "<br><b>Mound Name:</b> " 
                + e.features[0].properties["Mound Name"]
                + "<br><b> Classes Present:</b> "
                + e.features[0].properties["CerClass"].replace("[", "").replace("]", "")
                + "<br><b> Number of Samples:</b> "
                + e.features[0].properties["Number of Samples"]
                + "<br><b>Primary Time Period Present:</b> " 
                + e.features[0].properties["Primary Time Period"];



            new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description) // the string in the description var is added to the popup here
            .addTo(map);
        });
        
    // adding pop up for the temple
            map.on('click', layerID2, function (e) {
            var coordinates = e.features[0].geometry.coordinates.slice();
            var description = "<b>Temple:</b> " 
                + e.features[0].properties.Name 
                + "<br><b>Dating:</b> " 
                + e.features[0].properties.Dating
                + '<img class="templeImage" alt="Photo of a sandstone temple" src = "Temple.png">'

            new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description) // the string in the description var is added to the popup here
            .addTo(map);
        });


        // mousover code - changes when on a point vs. on general map 
      // Change the cursor to a pointer when the mouse is over the points for trenches layer.
      map.on('mouseenter', layerID, function () {
           map.getCanvas().style.cursor = 'pointer';
      });

      // Change the cursor to a pointer when the mouse is over the point for the temple.
      map.on('mouseenter', layerID2, function () {
           map.getCanvas().style.cursor = 'pointer';
      });

      // Change it back to a pointer when it leaves.
      map.on('mouseleave', layerID, function () {
             map.getCanvas().style.cursor = 'grab';
      });
    };
  }); 
}); 

</script>

</body>
</html>
